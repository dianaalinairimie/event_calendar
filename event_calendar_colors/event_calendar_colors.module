<?php

/**
 * The default color for event status.
 */
define('EVENT_STATUS_DEFAULT_COLOR', '#FFFFFF');

/**
 * The default css placeholder.
 */
define('EVENT_STATUS_CSS_PLACEHOLDER', 'status_placeholder');

/**
 * Define hooks_preprocess_hook().
 */
function event_calendar_colors_preprocess_calendar_item(&$variables) {
  // Gets the event entity.
  $event_entity = $variables['item']->getEntity();
  // Gets status of event.
  $event_status = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->load($event_entity->get('field_event_status')
      ->first()
      ->getValue()['target_id']);
  // Sets the event status color.
  $variables['event_status_color'] = t('status-' . strtolower($event_status->getName()));

  // Attach dynamic library to events.
  $variables['#attached']['library'][] = 'event_calendar_colors/event_calendar_colors';
  $variables['#cache']['max-age'] = 0;
}

/**
 * Implements hook_library_info_alter().
 */
function event_calendar_colors_library_info_alter(&$libraries, $extension) {
  // Adds the css files based on the default event status library.
  $path = file_create_url(file_default_scheme() . "://");

  if (!empty($libraries['event_color_default'])) {
    foreach ($libraries['event_color_default']['css'] as $depth => $files) {
      foreach ($files as $file_name => $file_options) {
        $libraries['event_calendar_colors']['css'][$depth][$path . $file_name] = $file_options;
      }
    }
  }
}

function event_calendar_colors_theme_registry_alter(&$theme_registry) {
  // Override calendar_item template from calendar module.
  if (!empty($theme_registry['calendar_item'])) {
    $theme_registry['calendar_item']['path'] = 'modules/custom/event_calendar/event_calendar_colors/templates';
    $theme_registry['calendar_item']['theme path'] = 'modules/custom/event_calendar/event_calendar_colors';
  }
}
