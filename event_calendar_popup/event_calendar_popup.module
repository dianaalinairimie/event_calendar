<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\NodeType;

/**
 * Implements hooks_form_alter().
 */
function event_calendar_popup_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_event_calendar_form') {
    // Gets the path of ajax call.
    $event_path = \Drupal::service('path.validator')
      ->getUrlIfValid(\Drupal::service('path.current')->getPath());
    // Checks if add node form is from modal.
    if ($event_path->getRouteName() == 'event_calendar_popup.modal') {
      // Alters add node type calendar_event redirect after submit to calendar page.
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'event_calendar_popup_callback';
        }
      }
    }
  }
}

/**
 * Implements hooks_preprocess_hook().
 */
function event_calendar_popup_preprocess_calendar_header(&$variables) {
  // Sets current calendar path.
  $current_url = \Drupal::service('path.validator')
    ->getUrlIfValid(\Drupal::service('path.current')->getPath());
  // Gets add node access service.
  $access_control_handler = \Drupal::service('access_check.node.add');
  // Checks for permission to add events.
  if ($access_control_handler->access(\Drupal::currentUser(), NodeType::load('event_calendar'))
    ->isAllowed()
  ) {
    $variables['add_event_modal'] = [
      '#type' => 'link',
      '#title' => '',
      '#url' => Url::fromRoute('event_calendar_popup.modal', [
        'js' => 'nojs',
        'current_route' => $current_url->getRouteName()
      ]),
      '#attributes' => [
        'class' => [
          'use-ajax',
          'add-event-button',
        ],
        'data-dialog-type' => [
          'modal'
        ],
        'data-dialog-options' => [
          '{&quot;width&quot;:400}'
        ],
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function event_calendar_popup_preprocess_views_view(&$variables) {
  if ($variables['view']->id() == 'content_field_date_on_calendar') {
    // Attaches library to calendar view template.
    $variables['#attached']['library'][] = 'event_calendar_popup/event_popup';
  }
}

/**
 * Ajax callback to add events from modal.
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   The current state of the form.
 */
function event_calendar_popup_callback($form, FormStateInterface $form_state) {
  // Gets the path of ajax call.
  $event_path = \Drupal::service('path.validator')
    ->getUrlIfValid(\Drupal::service('path.current')->getPath());
  if (!empty($event_path)) {
    // Redirects to calendar page after submit.
    $form_state->setRedirect($event_path->getRouteParameters()['current_route']);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function event_calendar_popup_theme_registry_alter(&$theme_registry) {
  // Overrides calendar_header template from calendar module.
  if (!empty($theme_registry['calendar_header'])) {
    $module_path = drupal_get_path('module', 'event_calendar');
    $theme_registry['calendar_header']['path'] = $module_path . '/event_calendar_popup/templates';
    $theme_registry['calendar_header']['theme path'] = $module_path . '/event_calendar_popup';
  }
}
