<?php

/**
 * @file
 * Contains hook implementations.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Send emails on create or update events.
 *
 * @param $module
 *   The module's unique name.
 * @param $key
 *   Unique key to indicate what message to build.
 * @param $to
 *   The recipient's email.
 * @param $langcode
 *   The language code.
 * @param $params
 *   Array of parameters to indicate the body of email.
 */
function send_email($module, $key, $to, $langcode, $params) {
  \Drupal::service('plugin.manager.mail')
    ->mail($module, $key, $to, $langcode, $params);
}

/**
 * Returns the status of the event chosen on configurations.
 *
 * @return string
 *   The name of the status.
 */
function setDefaultStatus() {
  return (\Drupal::config('events.settings')
    ->get('status')) ? 'Approved' : 'Pending';
}

/**
 * Implements hook_form_alter().
 */
function event_calendar_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Don't allow module uninstall if content of type 'event_calendar' exists.
  if ($form_id == 'system_modules_uninstall_confirm_form') {
    $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
    $entities = $storage_handler->loadByProperties(["type" => "event_calendar"]);
    if (!empty($entities)) {
      $form_state->setError($form, 'Content already exists');
      drupal_set_message('You can not remove this module until you have removed all of the Event calendar content.', 'error');
    }
  }
}

/**
 * Implements hook_mail().
 */
function event_calendar_mail($key, &$message, $params) {
  switch ($key) {
    case 'basic':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['headers']['Content-Type'] = 'text/html';
      $message['subject'] = $params['subject'];
      $message['body'][0] = render($params['body']);
      break;

    default:
  }
}

/**
 * Implements hook_node_presave().
 */
function event_calendar_node_presave(NodeInterface $node) {
  // Checks if node's type is event or new.
  if ($node->bundle() == 'event_calendar' && $node->isNew()) {
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['name' => setDefaultStatus()]);
    foreach ($terms as $term) {
      if ($term->get('vid')
          ->first()
          ->getValue()['target_id'] == 'events_status'
      ) {
        // Sets default status of event on "Pending" or "Approved".
        $node->set('field_event_status', $term->id());
      }
    }

    // Checks if event has status field and sets email content.
    $data = \Drupal::service('event_calendar.message_builder')
      ->buildMessage($node);

    // Sends email when a new event is created if this setting exists.
    \Drupal::service('event_calendar.email_sender')->sendEmail($data);
  }
}

/**
 * Implements hook_node_update().
 */
function event_calendar_node_update(NodeInterface $node) {
  // Checks if event status is updated.
  if ($node->bundle() == 'event_calendar' && $node->hasField('field_event_status') && !empty($node->get('field_event_status')
      ->first()) && !empty($node->original->get('field_event_status')->first())
    // @todo: this is ugly.
  ) {
    // Events settings.
    $events_settings = \Drupal::config('events.settings');

    // The recipients options.
    $recipients_options = $events_settings->get('recipients_approved_events');
    // Sends emails only to users who have the configured role.
    if (!empty($recipients_options)) {

      // Sets data for email content.
      $data = \Drupal::service('event_calendar.message_builder')
        ->buildMessage($node);

      // Send email after event was approved or denied.
      \Drupal::service('event_calendar.email_queue_sender')
        ->sendEmail($events_settings, $recipients_options, $data);
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function event_calendar_views_data_alter(array &$event) {
  $event['node']['event_calendar_bulk_form'] = array(
    'title' => t('Event operations bulk form'),
    'help' => t('Add a form element that lets you run operations on multiple events.'),
    'field' => [
      'id' => 'event_calendar_bulk_form',
    ],
  );
}
